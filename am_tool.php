<?

class FileInfo
{	

	public function __construct($file_path)
	{
		$this->getInfoByName($file_path);
	}
	
	public function getInfoByName($file_path)
	{
		if (file_exists($file_path))
		{
			$this->name = $file_path;
			$this->size = filesize($file_path);
			$this->lastmodified = filemtime($file_path);
			$this->crc32 = hash_file('crc32b', $file_path);
			$this->md5 = hash_file('md5', $file_path);
		} else die("no such file.");
	}
	
	public function __toString()
	{   
        $data = array($this->name, $this->size, $this->lastmodified, $this->md5);    
		return implode(';', $data);
	}

}


class WebServerEnvInfo
{	

	public function __construct()    
	{        
        $this->script_filename = $_SERVER["SCRIPT_FILENAME"];
        $this->document_root = $_SERVER["DOCUMENT_ROOT"];
        $this->http_host = $_SERVER["HTTP_HOST"];
        $this->admin_email = $_SERVER["SERVER_ADMIN"];
        $this->time = date("Y.m.d H:i:s", $_SERVER["REQUEST_TIME"]);		
	}

	public function addToXML($xml)
	{   
        $xml_env = $xml->addChild('server_environment');
        $xml_env->addChild('script_filename', $this->script_filename);
        $xml_env->addChild('document_root', $this->document_root);
        $xml_env->addChild('http_host', $this->http_host);
        $xml_env->addChild('admin_email', $this->admin_email);
        $xml_env->addChild('time', $this->time);
        return $xml;
	}

		
	public function __toString()
	{   
        $data = array($this->script_filename, $this->document_root, $this->http_host, $this->admin_email, $this->time);    
		return implode(';', $data);
	}

}


class FilesystemSnapshot
{
    private $files = array();

    public function getFileInfoArray() {
        return $this->files; 
    }

	function getXMLSnapshot($base_dir_name=NULL)
	{	    
        if (!$base_dir_name)
            $base_dir_name = $_SERVER['DOCUMENT_ROOT'] . '/';
       
        $xml_log = new SimpleXMLElement('<website_info/>');
        $xml_log_base = $xml_log->addChild('files');

        $current_directory = end(explode('/', getcwd()));
		$excluded_dirs = array(".", "..", $current_directory);

		if (is_dir($base_dir_name)) 
		{
			if ($base_dir = opendir($base_dir_name)) 
			{
				while (($basedir_element_name = readdir($base_dir)) !== false) 
				{

				    $absolute_path = $base_dir_name . $basedir_element_name;
 
					if (is_file($absolute_path)) 
					{        
                        $fileinfo = new FileInfo($absolute_path);
                        array_push($this->files, $fileinfo);

					} else if (is_dir($absolute_path) && !in_array($basedir_element_name, $excluded_dirs)) {
                        $this->getXMLSnapshot($absolute_path . "/");
					}

				}
				closedir($base_dir);

			} else print " dir opening error";

		} else print " no such dir";

	}

	public function addToXML($xml)
	{   
        $xml_log_fs = $xml->addChild('files');
        foreach($this->files as $fileinfo) {
            $xml_entry = $xml_log_fs->addChild('file');
            $xml_entry->addChild('path', $fileinfo->filename);
            $xml_entry->addChild('crc32', $fileinfo->crc32);
            $xml_entry->addChild('md5', $fileinfo->md5);
            $xml_entry->addChild('size', $fileinfo->filesize);
            $xml_entry->addChild('time_modified', $fileinfo->lastmodified);
        }
        return $xml;
	}
        
}

$xml_log = new SimpleXMLElement('<website_info></website_info>');

$ws_env = new WebServerEnvInfo();
$ws_env->addToXML($xml_log);

$fs = new FilesystemSnapshot();
$fs->getXMLSnapshot();
$fs->addToXML($xml_log);

Header('Content-type: text/xml');		

print $xml_log->asXML();

?>


