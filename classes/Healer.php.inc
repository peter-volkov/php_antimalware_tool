<?php

require_once("Archiver.php.inc");

class Healer
{	 
    
    private $quarantine_filename;

	public function __construct()
	{
        $time_string = date("Y_m_d_H_i", $_SERVER["REQUEST_TIME"]);
        $this->quarantine_filename = "quarantine." . $time_string . ".zip";
    }

	public function get_quarantine_filename()  
	{
        return $this->quarantine_filename;
    }
	
	private function parse_xml_recipe($xml_recipe) 
    {   
        $recipe;
        try {
            $recipe = new SimpleXMLElement($xml_recipe);
        } catch (Exception $e) {
            die("An exception has occured: " . $e->getMessage() . "\n");
        }
        if (!$recipe) {
            die("An exception has occured: ");
        }
       
        return $recipe;
    }

	private function get_file_meta($filename) 
    {   
        $fileinfo = new FileInfo($filename);  
        $file_meta = new SimpleXMLElement("<file></file>");        
        $file_meta->addChild("path", $fileinfo->name);
        $file_meta->addChild("crc32", $fileinfo->crc32);
        $file_meta->addChild("md5", $fileinfo->md5);
        $file_meta->addChild("size", $fileinfo->filesize);
        $file_meta->addChild("time_modified", $fileinfo->lastmodified);

        return $file_meta->asXML();
    }

	private function quarantine_file($filename) 
    {   
        $quarantine_filename = $this->get_quarantine_filename();
        if (file_exists($quarantine_filename)) { unlink ($quarantine_filename); }  

        $archiver = new Archiver($quarantine_filename, "a");

        $file_hash = hash_file("crc32b", $filename);
        $archiver->add_file($filename, $file_hash);

        $meta_filename = $file_hash . ".meta";
        $archiver->create_file($meta_filename, $this->get_file_meta($filename));
         
        $archiver->close();   
      
        return true;
    }

	private function delete_file($filename) 
    {
        return unlink($filename);        
    }

 
	public function execute_xml_recipe($xml_recipe)
	{
        $recipe =  $this->parse_xml_recipe($xml_recipe);
        $quarantine_files = $recipe->quarantine;
        $delete_files = $recipe->delete;

        foreach($quarantine_files as $quarantine_file)
        {
            $this->quarantine_file($quarantine_file);
            echo "file " . $quarantine_file . " was quarantined<br>";
        }

        foreach($delete_files as $delete_file)
        {
            $this->delete_file($delete_file);
            echo "file " . $delete_file . " was deleted<br>";
        }

	}
	

}

?>