<?php

ob_start();
require_once("View.inc.php");
ob_end_clean();


class Auth
{
     function __construct() {      
         global $project_root_dir;  
         $this->configPath = $project_root_dir . '/config.php';         
         $this->answerSentFlag = false;
     }


     function templateOutput($message) {
         $view = new View();
         $view->set("message", $message);
         $view->display("auth.tpl");
     }

	 function checkPasswordStrength($password) {

		if (strlen($password) < 8) {
			return "Error: Password is too short.";
		}

		$has_digit = preg_match("/\d+/", $password) ? 1 : 0;
		$has_uppercase = preg_match("/[A-Z]+/", $password) ? 1 : 0;
		$has_lowercase = preg_match("/[a-z]+/", $password) ? 1 : 0;
		$has_special = preg_match("/\W+/", $password) ? 1 : 0;

		$password_strength = $has_digit + $has_uppercase + $has_lowercase + $has_special;

		if ($password_strength < 3) {
			return false;
		}
		
		return true;
   		
	}

	function setPassword($password) {

        $password = hash('sha256', $password);
		$contents = '<?php $executor_password = \'' . $password  . '\';';

		setcookie("antimalware_password", $password);

		file_put_contents($this->config_path , $contents);
	}

	function showWeakPasswordView() {
		$this->template_output("Error: Password doesn't contain at least three groups of symbols: uppercase, lowercase, digits, special.");
        $this->answerSentFlag = true;
    }

	function showWrongPasswordView() {
		$this->template_output("Неверный пароль. Для сброса удалите config.php в каталоге утилиты.");
        $this->answerSentFlag = true;
    }

	function showAuthView() {
		$this->template_output("Введите пароль для доступа.");
        $this->answerSentFlag = true;
    }

	function showSetPasswordView() {
		$this->template_output("Придумайте пароль для доступа.");
        $this->answerSentFlag = true;
    }


	function trySetPassword() {
        if (empty($_POST['password']) || is_file($this->configPath)) {
             return false;
        }
 
        $password = $_POST['password'];

		if ($this->checkPasswordStrength($password)) {     
        	$this->setExecutorPassword($password);
            return true;
        } else {
            $this->showWeakPasswordView();
        }

        return false;
    }

      
	function tryValidatePasswordFromForm() {
        if (empty($_POST['password']) || !is_file($this->configPath))
            return false;

        require($this->configPath);

        $password_from_form = hash('sha256', $_POST['password']);
        if ($password_from_form == $password) { 
			setcookie("antimalware_password", $password);
            return true;        
        } else {
            $this->showWrongPasswordView();
        }
                
        return false;
	}

	function tryValidatePasswordFromCookie() {
        if (empty($_COOKIE['antimalware_password']) || !is_file($this->configPath))
            return false;
        $password_from_cookie = $_COOKIE['antimalware_password'];
        if ($password_from_cookie == $password) { 
            return true;        
		} else {
            $this->showWrongPasswordView();
        }
        
        return false;

	}
    
    function showPasswordCreationView() {
        $this->template_output("Придумайте пароль для доступа.");
    }

	function auth() {
        if (!trySetPassword())
			return false;

        if (tryValidatePasswordFromForm() || tryValidatePasswordFromCookie()) 
            return true;
        
        #If password was not specified
        if ($this->answerSentFlag)
			return false;

        if (is_file($this->configPath)) {
            $this->showAuthView();
        } else {
            $this->showPasswordCreationView();            
        }

        return false;

	}

}
