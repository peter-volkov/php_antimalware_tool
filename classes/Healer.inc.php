<?php

require_once("Archiver.inc.php");
require_once("FileInfo.inc.php");

class Healer {

    function __construct() {
        $time_string = date("Y_m_d_H_i", $_SERVER["REQUEST_TIME"]);
        $this->quarantine_filename = "quarantine." . $time_string . ".zip";
        $this->log = "";
        
        $this->web_root_dir = $_SERVER['DOCUMENT_ROOT'];

        if (file_exists($this->quarantine_filename)) {
            $this->log .= sprintf(PS_DELETE_ARCHIVE, $this->quarantine_filename);
            unlink($this->quarantine_filename);
        }

        $this->archiver = null;
    }

    function getQuarantineFilename() {
        return $this->quarantine_filename;
    }

    function parseXmlRecipe($xml_recipe) {
        $dom;
        try {
            $dom = new DOMDocument("1.0", "utf-8");
	        $dom->formatOutput = true; 
            $dom->loadXML($xml_recipe);
        }
        catch(Exception $e) {
            die(sprintf(PS_ERR_EXCEPTION_OCCURED, $e->getMessage()));
        }
        if (!$dom) {
            die(sprintf(PS_ERR_EXCEPTION_OCCURED, ''));
        }
        return $dom;
    }

    function quarantineFile($filename) {

        if (!is_file($filename)) {
            $this->log .= sprintf(PS_ERR_QUARANTINE_NOT_EXISTS, $filename);
            return false;
        }


        $fileinfo = new FileInfo($filename);
        $file_hash = $fileinfo->md5;

        $this->archiver->addFile($filename, $file_hash);
        $meta_filename = $file_hash . ".meta";

        $this->archiver->createFile($meta_filename, (string)$fileinfo);

        return true;
    }

    function deleteFile($filename) {
        if (!is_file($filename)) {
            $this->log .= sprintf(PS_ERR_DELETE_NOT_EXISTS, $filename);
            return false;
        }

        return unlink($filename);
    }

    function executeXmlRecipe($xml_recipe) {
        $recipe = $this->parseXmlRecipe($xml_recipe);

        $quarantine_files = $recipe->getElementsByTagName("quarantine");
        $delete_files = $recipe->getElementsByTagName("delete");

        $this->archiver = new Archiver($this->quarantine_filename, "a");

        foreach ($quarantine_files as $quarantine_file_node) {
            $filename = $quarantine_file_node->nodeValue;
            $absolute_path = $this->web_root_dir . substr($filename, 1); 
            if ($this->quarantineFile($absolute_path)) {
                $this->log .= sprintf(PS_WAS_QUARANTINED, $filename);
            }
        }

        $this->archiver->close();

        foreach ($delete_files as $delete_file_node) {
            $filename = $delete_file_node->nodeValue;            
            $absolute_path = $this->web_root_dir . substr($filename, 1); 
            if ($this->deleteFile($absolute_path)) {             
                $this->log .= sprintf(PS_WAS_DELETED, $filename);
            }
                    
        } 
        
        return $this->log;
    }
}
