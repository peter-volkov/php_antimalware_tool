<?php
require_once("XmlValidator.inc.php");
require_once ("FileInfo.inc.php");
require_once ("Util.inc.php");
class MalwareDetector {
    function __construct() {
        $util = new Util();
        $this->SIGNATURE_FILENAME =  $util->web_root_dir . '/pat/signatures/malware_db.xml';
        $this->MAX_FILESIZE = 1 * 1024 * 1024; // 1MB
        $this->MAX_PREVIEW_LENGTH = 80; // characters

	$validator = new XmlValidator();
	if (!$validator->validate(implode('', file($this->SIGNATURE_FILENAME)), 'static/xsd/malware_db.xsd')) {
		die('malware_db.xml is broken');
	}

        $this->signatures = new DOMDocument();
        $this->signatures->load($this->SIGNATURE_FILENAME);
    }

    function getFragment($content, $pos) {
       $max_chars = $this->MAX_PREVIEW_LENGTH;
       $max_len = strlen($content);
       $right_pos = min($pos + $max_chars, $max_len); 
       $min_pos = max(0, $pos - $max_chars);

       $res = substr($content, $min_pos, $pos - $min_pos) . 
           '@_MARKER_@' . 
           substr($content, $pos, $right_pos - $pos - 1);

        return htmlspecialchars($res);
    }


    function detectMalware($file_path, &$found_fragment, &$pos, $start_time, $timeout) {

        if (filesize($file_path) > $this->MAX_FILESIZE) {
           return "skipped";
        }

        if (!is_file($file_path)) {
           return "no_read";
        }

        
        $content = implode("", file($file_path));

        $db = $this->signatures->getElementsByTagName('signature');
        $detected = false;
                foreach ($db as $sig) {
           if ($detected) break;

           $cur_time = time();
           if ($cur_time - $start_time > $timeout) {
              return "timeout";
           }      

           $pos = -1;
           $sig_content = $sig->nodeValue;
           $attr = $sig->attributes;
           $attr_id = $attr->getNamedItem("id")->nodeValue;
           $attr_format = $attr->getNamedItem("format")->nodeValue;
           $attr_child_id = $attr->getNamedItem("child_id")->nodeValue;
           $attr_severity = $attr->getNamedItem("sever")->nodeValue;

           switch ($attr_format) {

              case 're': 
                         if (preg_match('#(' . $sig_content . ')#smi', $content, $found, PREG_OFFSET_CAPTURE)) {
                            $detected = true;
                            $pos = $found[0][1];
                            continue;
                         }

                         break;
              case 'const': 
                         if (($pos = strpos($content, $sig_content)) !== FALSE) {
                            $detected = true;
                            continue;
                         }

                         break;
           }
        }

        if ($detected) {
           $found_fragment = $this->getFragment($content, $pos);
           return $attr_severity;
        }
    }

} // End of class
