<?php

ob_start();
require_once("FileInfo.inc.php");
require_once("WebServerEnvInfo.inc.php");
require_once("View.inc.php");
require_once("AjaxScanner.inc.php");
require_once("Archiver.inc.php");
require_once("Auth.inc.php");
require_once("MalwareDetector.inc.php");
ob_end_clean();

class ScannerController {

	function template_output($path_to_xml, $interval, $malware) {
		   $view = new View();
		   $view->set("title", "File Scanner");
		   $view->set("path_to_xml", $path_to_xml);
           $view->set("interval", $interval);
           $view->set("malware", $malware ? 'checked' : '');
		   $view->display("scanner.tpl");
	}

    function removeTempFiles() {
        global $project_root_dir;         
        array_map('unlink', glob($project_root_dir . "/*.tmp.txt"));
        array_map('unlink', glob($project_root_dir . "/*.tmp"));
    }

    function getXMLReport() {
		$file_scanner = new AjaxScanner();

        $dom = new DOMDocument('1.0', 'utf-8');

        // create report container
        $website_info_node = $dom->createElement('website_info');
        $dom->appendChild($website_info_node);

        // gather server info and append it to the report
        $ws_env = new WebServerEnvInfo();
        $ws_env_node = $ws_env->getXMLNode();
        $dom->documentElement->appendChild($dom->importNode($ws_env_node, true));

        // retrieve list of files and append it to the report
        $tmp_xml_doc = new DOMDocument();
        $tmp_xml_doc->loadXML('<files>' . $file_scanner->getXMLFilelist() . '</files>');

        $dom->documentElement->appendChild($dom->importNode($tmp_xml_doc->documentElement, true));

        return $dom->saveXML();
    }

    function getPackedArchive() {
        global $project_root_dir; 
        $log_filename = 'scan_log.xml';
    	$log_filepath = $project_root_dir . '/' . $log_filename;
     	$packed_log_filename = $log_filename . '.zip';

        if (!is_file($log_filename)) {
            die('There is no xml log. You have to run scan again.');
        }

        $xml_data = file_get_contents($log_filename);

        $archiver = new Archiver($packed_log_filename, 'w');
        $archiver->createFile($log_filename, $xml_data);
        $archiver->close();

        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
        header("Cache-Control: private",false);
        header("Content-Type: application/zip");
        header("Content-Disposition: attachment; filename=".basename($packed_log_filename).";" );
        header("Content-Transfer-Encoding: binary");
        header("Content-Length: ".filesize($packed_log_filename));
        readfile($packed_log_filename);               

        unlink($packed_log_filename);
        unlink($log_filename);
        $this->removeTempFiles();
    }

	function start() { 
        

		$authenticator = new Auth();

		if ($authenticator->auth()) {

			ob_start();

			if ( !empty($_POST['a']) )
			{	
				$action = $_POST['a'];

                $malware = $_POST['m'] == 'on' ? true : false;
                $interval = (int)$_POST['i'];

				$file_scanner = new AjaxScanner();
                $file_scanner->setInterval($interval);                


				if ($action == 'prep') {
				    //PREPARATION
					$file_scanner->setUp();
                    $this->removeTempFiles();
					echo $file_scanner->performScanning();
				} else if ($action == 'scan') {
    				//SCANNING
					echo $file_scanner->performScanning(); 

				} else if ($action == 'malware_scan') {
                    $this->detector = new MalwareDetector();
                    $num_files_scanned = $this->detector->malwareScanRound();
                    echo $num_files_scanned;

				} else if ($action == 'finalize_signature_scan') {
     
                        $this->detector = new MalwareDetector();
                        return $this->detector->finishMalwareScan();                         

				} else if ($action == 'finalize_filelist_scan') {
         				//REPORTING
                        $xml_log = $this->getXMLReport();
                         
                        $log_filename = 'scan_log.xml';
     			        file_put_contents($log_filename, $xml_log);
        
				        // clean up scanner
				        $file_scanner->cleanUp();

				        echo "FINALIZED";

				}
			} else if ( !empty($_GET['a']) && $_GET['a'] == 'get_packed_xml_log' )  {
   			   //ARCHIVE DOWNLOADING
               $this->getPackedArchive();
            } else {
			   //GENERATE INTERFACE
               $file_scanner = new AjaxScanner();
               $get_packed_archive_url = $_SERVER['REQUEST_URI'] . '&a=get_packed_xml_log';
               $this->template_output($get_packed_archive_url, $file_scanner->getInterval(), True);
  
			}
		}
	}


}