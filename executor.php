<?

#ZipArchive requies PHP above 5.2
class FileInfo
{	

	public function __construct($file_path)
	{
		$this->getInfoByName($file_path);
	}
	
	public function getInfoByName($file_path)
	{
		if (file_exists($file_path))
		{
			$this->name = $file_path;
			$this->size = filesize($file_path);
			$this->lastmodified = filemtime($file_path);
			$this->crc32 = hash_file('crc32b', $file_path);
			$this->md5 = hash_file('md5', $file_path);
		} else die("no such file.");
	}
	
	public function __toString()
	{   
        $data = array($this->name, $this->size, $this->lastmodified, $this->md5);    
		return implode(';', $data);
	}

}

class Healer
{	

	private function get_quarantine_filename()  
	{
        $quarantine_filename = 'quarantine.zip';
        return $quarantine_filename;
    }
	
	private function parse_xml_recipe($xml_recipe) 
    {   
        $recipe;
        try {
            $recipe = new SimpleXMLElement($xml_recipe);
        } catch (Exception $e) {
            die('An exception has occured: ' . $e->getMessage() . "\n");
        }
        if (!$recipe) {
            die('An exception has occured: ');
        }
       
        return $recipe;
    }

	private function get_file_meta($filename) 
    {   
        $fileinfo = new FileInfo($filename);  
        $file_meta = new SimpleXMLElement('<file></file>');        
        $file_meta->addChild('path', $fileinfo->name);
        $file_meta->addChild('crc32', $fileinfo->crc32);
        $file_meta->addChild('md5', $fileinfo->md5);
        $file_meta->addChild('size', $fileinfo->filesize);
        $file_meta->addChild('time_modified', $fileinfo->lastmodified);

        return $file_meta->asXML();
    }

	private function quarantine_file($filename) 
    {     

        $zip = new ZipArchive;
        $res = $zip->open($this->get_quarantine_filename(), ZipArchive::CREATE);
        if ($res === true) {
            $file_hash = hash_file('crc32b', $filename);
            $zip->addFile($filename, $file_hash);
            $meta_filename = $file_hash . '.meta';
            $zip->addFromString($meta_filename, $this->get_file_meta($filename));
            $zip->close();            
        } else {
            echo 'failed';
        }
      
        return true;
    }

	private function delete_file($filename) 
    {
        return unlink($filename);        
    }

 
	public function execute_xml_recipe($xml_recipe)
	{
        $recipe =  $this->parse_xml_recipe($xml_recipe);
        $quarantine_files = $recipe->quarantine;
        $delete_files = $recipe->delete;

        foreach($quarantine_files as $quarantine_file)
        {
            $this->quarantine_file($quarantine_file);
            echo 'file ' . $quarantine_file . ' was quarantined<br>';
        }

        foreach($delete_files as $delete_file)
        {
            $this->delete_file($delete_file);
            echo 'file ' . $delete_file . ' was deleted<br>';
        }

	}
	

}

if (!empty($_POST) && !empty($_POST["recipe"])) 
{
    $healer = new Healer();
    $xml_recipe = $_POST["recipe"];
    $healer->execute_xml_recipe($xml_recipe);
}




?>

<!doctype html>
<html>
    <head>
        <script src="js/validate.js"></script>
    </head>
    <body> 
        <form action="<? echo basename($_SERVER['PHP_SELF']) ?>" method="POST" onsubmit="return validate_recipe(this);">
            <textarea name='recipe' style="height;50%;width:50%"></textarea><br>    
            <input type="submit"/>
        </form>
    </body> 

</html>


